name: 'OpsLevel - Report Deploy'
author: 'OpsLevel <support@opslevel.com>'
description: 'Create a deploy event for a service in OpsLevel'
branding:
  icon: 'package'
  color: 'blue'
inputs:
  integration_url:
    description: 'The OpsLevel deploy integration url'
    required: true
  deduplication_id:
    description: 'An identifier that can be used to deduplicate deployments'
    required: false
    default: ${{ github.run_id }}
  deployer_email:
    description: 'The deployer email who created the event'
    required: false
    default: ''
  deployer_name:
    description: 'The deployer name who created the event'
    required: false
    default: ${{ github.actor }}
  deploy_url:
    description: 'The deploy url that OpsLevel points to'
    required: false
    default: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  description:
    description: 'The description or release notes for the event'
    required: false
    default: 'Event Created by OpsLevel Github Action'
  environment:
    description: 'The environment for the event'
    required: false
    default: production
  number:
    description: 'The deploy number for the event'
    required: false
    default: ${{ github.run_number }}
  service:
    description: 'The service alias for the event'
    required: false
    default: ${{ github.repository }}
  use_docker:
    description: 'Send deploy using docker if "true" - use OpsLevel CLI otherwise'
    required: false
    default: 'true'
runs:
  using: "composite"
  steps:
    - name: Do it with Docker
      if: ${{ inputs.use_docker == 'true' }}
      uses: OpsLevel/report-deploy-github-action/with-docker@v1.0.0
      with:
        integration_url: ${{ inputs.integration_url }}
        deduplication_id: ${{ inputs.deduplication_id }}
        deployer_email: ${{ inputs.deployer_email }}
        deploy_url: ${{ inputs.deploy_url }}
        deployer_name: ${{ inputs.deployer_name }}
        description: ${{ inputs.description }}
        environment: ${{ inputs.environment }}
        number: ${{ inputs.number }}
        service: ${{ inputs.service }}
    - name: Install OpsLevel cli
      if: ${{ inputs.use_docker != 'true' }}
      shell: bash
      run: |
        curl -sLS https://raw.githubusercontent.com/OpsLevel/cli/main/install.sh | sudo sh
    - name: Report Deploy to OpsLevel
      if: ${{ inputs.use_docker != 'true' }}
      shell: bash
      run: |
        echo ::add-mask::$INTEGRATION_URL
        cat <<EOF > data.yaml
        service: "${{ inputs.service }}"
        description: "${{ inputs.description }}"
        environment: "${{ inputs.environment }}"
        deploy-number: "${{ inputs.number }}"
        deploy-url: "${{ inputs.deploy_url}}"
        dedup-id: "${{ inputs.deduplication_id }}"
        deployer:
          name: "${{ inputs.deployer_name }}"
          email: "${{ inputs.deployer_email }}"
        EOF
        opslevel create deploy -i "${INTEGRATION_URL}" -f .
      env:
        INTEGRATION_URL: ${{ inputs.integration_url }}
